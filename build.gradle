plugins {
    id 'org.springframework.boot' version '2.4.5'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'war'
    id 'com.diffplug.eclipse.apt' version '3.23.0'
}

group = 'gradle.doma'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

/* DomaのSQLファイルをコンパイルより前に出力先Dirにコピーするための設定 */
processResources.destinationDir = compileJava.destinationDir
compileJava.dependsOn processResources

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-aop'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'mysql:mysql-connector-java'
    annotationProcessor 'org.projectlombok:lombok'
    implementation 'org.seasar.doma.boot:doma-spring-boot-starter:1.4.0'
    annotationProcessor 'org.seasar.doma:doma-processor:2.35.0'
    providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    //implementation group: 'log4j', name: 'log4j', version: '1.2.17'
    implementation("org.apache.commons:commons-lang3:3.4")
   // implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.0.1'

}

test {
    useJUnitPlatform()
}

task copyDomaResources(type: Sync)  {
    from sourceSets.main.resources.srcDirs
    println 'SQL file of the copy source'
    println sourceSets.main.resources.srcDirs
    into compileJava.destinationDir
    println 'SQL file of the copy destination'
    println compileJava.destinationDir
    include 'doma.compile.config'
    include 'META-INF/**/*.sql'
    include 'META-INF/**/*.script'
}
bootWar {
    enabled = false
}
compileJava {
    dependsOn copyDomaResources

    options.encoding = 'UTF-8'
}

test {
    enabled = false
}

eclipse {
    classpath {
        file {
            whenMerged { classpath ->
                classpath.entries.removeAll { it.path == '.apt_generated' }
            }
            withXml { provider ->
                def node = provider.asNode()
                // specify output path for .apt_generated
                node.appendNode( 'classpathentry', [ kind: 'src', output: 'bin/main', path: '.apt_generated'])
            }
        }
    }
    jdt {
        javaRuntimeName = 'JavaSE-1.8'
    }
}
